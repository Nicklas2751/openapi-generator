/*
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.auth;

import org.apache.commons.lang3.StringUtils;
import org.openapitools.client.ApiClient;

import java.net.CookieManager;
import java.net.HttpCookie;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.util.logging.Level;
import java.util.logging.Logger;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0-SNAPSHOT")
public class ApiKeyAuth implements Authentication {
  private static final Logger log = Logger.getLogger(ApiKeyAuth.class.getName());

  private static final String QUERY_KEY_VALUE_DEVIDER = "=";
  private static final String QUERY_START_SIGN = "?";
  private static final String QUERY_APPEND_SIGN = "&";
  private final ApiKeyLocation location;
  private final String paramName;

  private String apiKey;
  private String apiKeyPrefix;

  public ApiKeyAuth(ApiKeyLocation location, String paramName) {
    this.location = location;
    this.paramName = paramName;
  }

  public ApiKeyLocation getLocation() {
    return location;
  }

  public String getParamName() {
    return paramName;
  }

  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }

  public String getApiKeyPrefix() {
    return apiKeyPrefix;
  }

  public void setApiKeyPrefix(String apiKeyPrefix) {
    this.apiKeyPrefix = apiKeyPrefix;
  }

  @Override
  public void applyToParams(HttpRequest.Builder requestBuilder, HttpClient httpClient) {
    if (apiKey == null) {
      return;
    }

    String value;
    if (apiKeyPrefix != null) {
      value = apiKeyPrefix + " " + apiKey;
    } else {
      value = apiKey;
    }


    switch (location) {
      case QUERY:
        appendToUri(requestBuilder, value);
        return;
      case HEADER:
        addHeaer(requestBuilder, value);
        return;
      case COOKIE:
        addToCookies(requestBuilder, httpClient, value);
    }

  }

  private void addToCookies(HttpRequest.Builder requestBuilder, HttpClient httpClient, String value) {
    var optCookieHandler = httpClient.cookieHandler();
    if(optCookieHandler.isPresent()) {
      var cookieHandler = optCookieHandler.get();
      if(cookieHandler instanceof CookieManager) {
        var cookieManager = (CookieManager) cookieHandler;
        cookieManager.getCookieStore().add(
                getCurrentUri(requestBuilder),
                new HttpCookie(paramName, value)
        );
      } else {
        log.log(Level.WARNING, "Can't add api key as cookie because the cookie handler is no instance of cookie manager!");
      }
    } else {
      log.log(Level.WARNING, "Can't add api key as cookie because no cookie handler is set!");
    }
  }

  private URI getCurrentUri(HttpRequest.Builder requestBuilder) {
    return requestBuilder.copy().build().uri();
  }

  private void addHeaer(HttpRequest.Builder requestBuilder, String value) {
    requestBuilder.header(paramName, value);
  }

  private void appendToUri(HttpRequest.Builder requestBuilder, String value) {
    var currentUri = getCurrentUri(requestBuilder);
    requestBuilder.uri(URI.create(currentUri.toString() + appendToOrCreateQuery(currentUri) + paramName + QUERY_KEY_VALUE_DEVIDER + ApiClient.urlEncode(value)));
  }

  private String appendToOrCreateQuery(URI currentUri) {
    return currentUri == null || StringUtils.isBlank(currentUri.getQuery()) ? QUERY_START_SIGN : QUERY_APPEND_SIGN;
  }

  public enum ApiKeyLocation {
    QUERY,
    HEADER,
    COOKIE;
  }
}
